

What is IAC : 
- a way to help infrastructure provisioning and congiguration through code without the need to do that pyhsically 
- easier infrastructure automation with the pipelines 
- ist part of your codebase/repo tracked and version-controlled 
    - its not anymore something left to the discretion of the sys-admin or devops engineer to decide informally 
- easier security scanning and vulnerability discovery  

- Iac is work through templates . with iac the congiguration files are created according to the congiguration specification 


* types of the IaC : 
- scripts : scripting is a very direct of IaC , this type of IaC is usually used for simple task and is not advised for complex task 
- congiguration management tool  : ......
- provisioning tools : .......
- container and templating tools : ..........

* brnrfits of infrastructure as a code : 
    - efficency 
    - versioning and tracking 
    - speed 
    - collaboration : ......
    - eliminate congiguration drift : ......
    - stable and scaleable enviroments 
    - Disaster Recovery 
    
* Two approaches of automateting infrastructure : 
    - declarative : you define the desired state of the final solution 
    - imperative : you define the steps to execute in order to reach the desired soultion 

* Mutable Vs immutable infrastructure : 
    - Mutable infrastructure : can be changed to fit business needs , you can easily introduce updates to the existing version , applay pathces and scale 
    - immutable infrastructure : cant be changed oonce deploy , if you want to make change it or update it you have to replace it with new version -> docker , terraform , K8S  

* Agent Vs Agentless : .....

how to start doing it : 

- Terraform :  tool of infrastructure as code tool that let you define both cloud and on-prem resources in human-readable congiguration files that you can version , reuse and share , to automate infrastructure tasks 
             - cloud agnostic 
             - the most widely-used IaC tool 
             - helps manage and automate infrastructure
             - uses a declarative language to describe infrastructure , little logic involved 
             - use HCL language : its declarative language and focusing in end state

-The beauty of Terraform is that it does not ask you how to get from the infrastructure you have to the infrastructure you want

 

* the core terraform workflow consists of three satges : 
    - Write : you define resources , wich may be across multiple cloud Provideer and services 
    - plan : create execution plan describe the infrastructure it will create , update or destroy 
    - applay : on approval ....



- Some Terms Of Terraform : 
    - Provideer : plugins the help Terraform interact with defferent platforms , A provider in Terraform is a connection that allows Terraform to manage infrastructure using a pre-defined interface. This abstraction means the provider is completely separate from the Terraform engine - which understands how to read state from a provider, read HCL code, and work out how to get to the desired state.

    - Resource : an infrastructure piece you're defining 
    - state File : a file containing information about the current state of the infrastructure 
    - Backend : the place where the state File is stored , can be local or in cloud 
    - Var : a terraform value/Variable that the user can set 
    - local : a terraform value that is constant-ish and the user can't change 

- provisioning : is the process of setting up It infrastructure , it can also refer to the steps required to manage and acess to data and Resource 

* infrastructure provisioning ( terraform ) Vs congiguration management( ansible ) : ........ 

Two parts of Terraform
Terraform is actually split into two parts:

One part is the Terraform engine that knows how to get from the state your infrastructure is currently into the state you want your infrastructure to be in.

The other part is the provider, which talks to the infrastructure to find out the current state and make changes using the infrastructure’s API.


## Terraform vs. CloudFormation# :
- Faster Terraform
- CloudFormation readability : YAML does allow comments and is a bit less verbose than JSON. The big downside of YAML is that YAML is very, very fussy about correct indentation
- Terraform readability : Terraform uses HCL, which has a clean, concise syntax. It is very easy to read, allows comments (both inline and block), and is not fussy about spacing, newlines, or indentation.
- Terraform’s pinnacle killer feature : Terraform to configure all of your infrastructures, whereas CloudFormation only works for AWS.

## Chef and Puppet vs. Terraform 

## terraform command : 
- terraform init : to initialize the working directory containing Terraform configuration files

- Terraform plan  : The plan is what Terraform will do to get the real infrastructure from where it is now to how you have specified you want it to be in code

- The great thing about this plan is that Terraform presents it to us and then pauses, giving us time to decide whether we want to go ahead. You can imagine how useful this is if you accidentally make a change that will destroy your database! To get Terraform to make these changes and create the S3 bucket, type yes and press enter

- Terraform apply : 
Once the apply has finished, you should see the message Apply complete! Resources: 1 added, 0 changed, 0 destroyed.. This is Terraform telling you that it successfully created the S3 bucket for you. Now, let’s work through the following steps:

-Terraform destroy
Simply run the command terraform destroy.

Terraform will present a plan to you of what it is going to destroy and then pause so you can confirm.

Type yes and press enter. When the destroy finishes, you will see a message Destroy complete! Resources: 1 destroyed..

This is telling you Terraform has successfully destroyed everything.

Log into the AWS console and go to S3, and you will see that the bucket is now gone.

- terraform validate : to check the syntax of the file 
- terraform fmt : to format the file
- terraform show : to show the current state of the infrastructure
- terraform state : to show the state of the infrastructure
- terraform output : to show the output of the infrastructure

--- Terraform resources
- resource : a block of code that defines a single piece of infrastructure 
- data : a block of code that defines a data source , which is a way to fetch data from a resource that is not managed by the current Terraform project 

- module : a block of code that defines a module , which is a way to group together resources and data sources

- output : a block of code that defines an output , which is a way to expose information about the infrastructure to the user

- provider : a block of code that defines a provider , which is a way to connect Terraform to a cloud provider or other service , three types of providers : 
    - official providers : maintained by HashiCorp , such as AWS or Azure
    - community providers : maintained by the community  , not by HashiCorp
    - partner providers : maintained by a partner of HashiCorp : such as Datadog or PagerDuty 

- variable : a block of code that defines a variable , which is a way to pass information into a module or resource

- locals : a block of code that defines a local value , which is a way to store information that is used multiple times in a module or resource

- terraform : a block of code that defines the terraform block , which is a way to configure Terraform itself , such as the version of Terraform to use

- null_resource : a block of code that defines a null resource , which is a way to run a local provisioner , which is a way to run a local script or command 


-- vpc in AWS : 
# vpc in aws is a virtual private cloud that allows you to launch aws resources into a virtual network that you define  
- this network is isolated from other VPCs and public internet 

- subnet : range of ip addresses within a vpc 
- internet gateaway : virtual router that connects your vpc to public internet 
- security group 
- vpn  connection 
- vpc endpoint 
- traffic mirroring 


## Creating multiple instances of the same provider
```
provider "aws" {
    region = "us-east-1"
}

provider "aws" {
    region = "us-east-2"
    alias = "ohio"
}

resource "aws_vpc" "n_virginia_vpc" {
    cidr_block = "10.0.0.0/16"
}

resource "aws_vpc" "ohio_vpc" {
    cidr_block = "10.1.0.0/16"
    provider = aws.ohio
}
```
# VPC creation : 
......


# data sources in detail : 

A data source in Terraform is used to fetch data from a resource that is not managed by the current Terraform project.
 This allows it to be used in the current project. You can think of it as a read-only resource that already exists;
  the object exists, but you want to read specific properties of that object for use in your project.


file & structure :
"block_Name" "resource_type" "resource_name" {
    key = "value"
}

state file :
- terraform.tfstate :  is a file that keeps track of the resources that Terraform has created and their current state, such as the ID of the resource, the IP address, and so on. This file is created when you run terraform apply and is updated every time you run terraform apply or terraform destroy.
- terraform.tfstate.backup : is a backup of the terraform.tfstate file. It is created every time you run terraform apply or terraform destroy. If you accidentally delete the terraform.tfstate file, you can use the terraform.tfstate.backup file to restore the state of your infrastructure.
- terraform.tfstate.lock.info : is a lock file that is created when you run terraform apply. It is used to prevent multiple users from running terraform apply at the same time. If you see this file, it means that Terraform is currently applying changes to your infrastructure.

desired state vs current state :
- Desired state is the state of the infrastructure that you want to achieve. It is defined in the Terraform configuration files.
- Current state is the state of the infrastructure that Terraform has created. It is stored in the terraform.tfstate file.

terraform variables : 
- Variables in Terraform are a way to pass information into a module or resource. They allow you to define values that can be used in multiple places in your Terraform configuration files. Variables can be defined at the root module level or within a module.
- can be defifined in the same file or in a separate file or can be passed as an argument in the command line or as an environment variable     
   
    -Variable Defaults : means that if you do not provide a value for that variable, then the default will be used
    - -var flag  : to pass the variable as an argument in the command line
    - export TF_VAR_name=value : to pass the variable as an environment variable 
    - terraform.tfvars : to store the variables in a separate file
    - type constraints : to define the type of the variable
                        - simple types : string , number , bool
                        - complex types : - list :  type = list(string) , => element (var.name, number ) to get specific element , length(var.name) to get the length of the list
                                          - map :  
                                          - object : 
                                          - tuple : 
                                          - set : 





# output in terraform :
- Outputs in Terraform are a way to expose information about the infrastructure to the user. They allow you to define values that can be displayed after Terraform has finished applying changes to the infrastructure. Outputs can be defined at the root module level or within a module.
- can be used to display the ip address of the instance or the id of the instance or the name of the instance 
- can be used to display the output of the module
- example :  output "instance_ip" { value = aws_instance.example.public_ip } => this will display the ip address of the instance 

# data block in terraform : 
- A data block in Terraform is used to fetch data from a resource that is not managed by the current Terraform project. This allows it to be used in the current project. You can think of it as a read-only resource that already exists; the object exists, but you want to read specific properties of that object for use in your project.
- example : data "aws_ami" "example" { most_recent = true owners = ["self"] } => this will fetch the most recent ami that is created by the owner 

# terraform provisioners :
- Provisioners in Terraform are used to execute scripts or commands on a local or remote machine as part of the resource creation process. They allow you to run scripts or commands to configure the resource after it has been created. Provisioners can be used to install software, run commands, or perform other tasks on the resource.
- example : provisioner "local-exec" { command = "echo 'Hello, World!'" } => this will run the command echo 'Hello, World!' on the local machine


# terraform debugging :
- use export TF_LOG=DEBUG to enable the debug mode and to stop it use export TF_LOG=off 
- trace mode : the most verbose level it provides details logs for debugging including information about each terraform opration
- DEBUG : a high level of verbosity that provides terraform action and operation 
- INFO : a medium level of verbosity
- WARN : log warning message used to indicate potential issues or concerns in the terraform configuration
- ERROR : a low level of verbosity that provides error messages

# resource dependencies in terraform :
- implicit dependencies : Terraform automatically creates dependencies between resources based on the order in which they are defined in the configuration file. If resource A depends on resource B, Terraform will automatically create a dependency between the two resources.
- explicit dependencies : You can also define explicit dependencies between resources using the depends_on argument. This allows you to specify that one resource depends on another resource, even if they are not defined in the same module.
- example : resource "aws_instance" "example" { depends_on = [aws_security_group.example] } => this will create a dependency between the instance and the security group

# terraform state commands :
- terraform state list : to list all the resources in the state file
- terraform state show : to show the details of a specific resource in the state file
- terraform state mv : to move a resource to a new name in the state file
- terraform state rm : to remove a resource from the state file
- terraform state pull : to pull the current state from the remote state file
- terraform state push : to push the current state to the remote state file
- terraform state replace-provider : to replace the provider for a resource in the state file

# remote state & backup configuration :
- backend : the place where the state file is stored, can be local or in the cloud

- remote state : the state file stored in a remote backend, such as Amazon S3 or HashiCorp Consul

- backup configuration : a backup of the state file that is created every time you run terraform apply or terraform destroy. It is used to restore the state of your infrastructure if the state file is accidentally deleted.

- state locking : a mechanism used to prevent multiple users from running terraform apply at the same time. It is used to ensure that only one user can make changes to the infrastructure at a time.

- example : terraform { backend "s3" { bucket = "my-terraform-state" key = "terraform.tfstate" region = "us-east-1" } } => this will configure the backend to store the state file in an S3 bucket

# terraform import command : 
- The terraform import command is used to import existing infrastructure into Terraform. It allows you to bring existing resources under Terraform management so that you can manage them using Terraform configuration files.
- example : terraform import aws_instance.example i-1234567890abcdef0 => this will import the existing instance with the ID i-1234567890abcdef0 into Terraform

# terraform modules :
- A module in Terraform is a mini Terraform project that can contain all of the same constructs as our main Terraform project (resources, data blocks, locals, etc.)
- allow us to define a reusable block of Terraform code of which we can have many instances in our main Terraform project.
- remote modules : modules that are stored in a remote repository, such as the Terraform Registry or a Git repository 


# terraform best practices :
- Use version control : Use version control to track changes to your Terraform configuration files and collaborate with other team members.
- Use modules : Use modules to create reusable components that can be shared across different projects.
- Use variables : Use variables to pass information into modules and resources and make your configuration files more flexible.
- Use outputs : Use outputs to expose information about the infrastructure to the user and make it easier to access important information.
- Use remote state : Use remote state to store the state file in a remote backend and make it easier to manage and share the state file.
- Use workspaces : Use workspaces to manage multiple environments within a single Terraform configuration and make it easier to create separate instances of the same infrastructure in different environments.
- Use state locking : Use state locking to prevent multiple users from running terraform apply at the same time and ensure that only one user can make changes to the infrastructure at a time.
 

# breif about VPC in AWS : 
- A VPC in AWS is a virtual private cloud that allows you to launch AWS resources into a virtual network that you define. This network is isolated from other VPCs and the public internet.
- A subnet is a range of IP addresses within a VPC.
- An internet gateway is a virtual router that connects your VPC to the public internet.
- A security group is a virtual firewall that controls inbound and outbound traffic to your instances.

#Terraform import command : 
- The terraform import command is used to import existing infrastructure into Terraform. It allows you to bring existing resources under Terraform management so that you can manage them using Terraform configuration files.
-  read the resource and put it into its state. Remember, the state is Terraform’s store of what it created or which resources it manages. By doing an import, you are instructing Terraform to start managing that resource.   

# terraform state rm  :
- The terraform state rm command is used to remove a resource from the state file. It allows you to remove a resource that is no longer needed or that was imported by mistake. When you run terraform state rm, Terraform will remove the resource from the state file and update the state file accordingly.

# Workspaces in Terraform :
-Workspaces are an important feature of Terraform that can be used to create several copies of your infrastructure
- Workspaces allow you to manage multiple environments within a single Terraform configuration. This can be useful if you want to create separate instances of the same infrastructure in different environments, such as development, staging, and production.

# Terraform provisioners :
- A provisioner in Terraform can run a script either remotely or locally after a resource has been created. Provisioners can be used to install software, run commands, or perform other tasks on the resource. There are several types of provisioners in Terraform, including local-exec, remote-exec, and file.
- .... 